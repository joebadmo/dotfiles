set-option -g default-shell ${HOMEBREW_PREFIX}/bin/zsh

# Get equipped with: system clipboard
# ===================================
set -g xterm-keys on

bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi Escape send-keys -X clear-selection
bind -T copy-mode-vi y send-keys -X copy-pipe "pbcopy" \; send-keys -X clear-selection
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"

# so esc register immediately
set -s escape-time 0

# more history
set-option -g history-limit 5000

# focus events so `autoread` works in neovim
set-option -g focus-events on

# fix the prefix
# ==============

set -g prefix C-a
# unbind C-b
# bind C-a send-prefix

# Get equipped with: vi controls
# ==============================

set-option -w -g mode-keys vi
bind [ copy-mode

# reload config
# ==============

bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"

# Session Management and Navigation
# ======================================

bind C-f choose-session
bind C-c new-session
bind C-p switch-client -p
bind C-n switch-client -n

# Window (tab) Management and Navigation
# ======================================

unbind c
bind c new-window -c '#{pane_current_path}'

bind -r z last-window
bind , command-prompt "rename-window '%%'"

# Pane Management and Navigation
# ================================

# splitting vertically

unbind %
bind v split-window -h -c '#{pane_current_path}'
bind -r up resize-pane -U 1
bind -r down resize-pane -D 1

# splitting horizontally

unbind '"'
bind s split-window -v -c '#{pane_current_path}'
bind -r left resize-pane -L 1
bind -r right resize-pane -R 1

# navigate like vim

bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind -r space select-pane -t:.+

# modified for default vim keybindings
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-w if-shell "$is_vim" 'send-keys C-w'  'switch-client -T vim-navigation'

bind -T vim-navigation h select-pane -L
bind -T vim-navigation j select-pane -D
bind -T vim-navigation k select-pane -U
bind -T vim-navigation l select-pane -R

# reorder windows
unbind 't'
bind -r t swap-window -d -t +1
bind -r T swap-window -d -t -1

# pane borders

set -g pane-border-style 'fg=white,bg=black'
set -g pane-active-border-style 'fg=white,bg=black'

# pane status

set -g pane-border-status bottom
set -g pane-border-format '─'

# message text

set -g message-style 'fg=cyan, bg=black'

# status bar

set -g status-position bottom
set -g status-left '[#S] '
set -g status-left-length 20
set -g status-right ''
set -g status-interval 1
set -g window-status-format ' \
#{s|/Users/moon|~|;\
s|/Users/joe|~|;\
s|home|⌂|;\
s|~/stripe/pay-server|pay|;\
s|~/stripe/todo.wiki|todo|;\
s|~/stripe-b/pay-server|pay|;\
s|pay/manage/frontend|dashboard|;\
=/-16/…\
:pane_current_path}:#{pane_current_command}\
 '
set -g window-status-current-format ' \
#{s|/Users/moon|~|;\
s|/Users/joe|~|;\
s|home|⌂|;\
s|~/stripe/pay-server|pay|;\
s|~/stripe/todo.wiki|todo|;\
s|~/stripe-b/pay-server|pay|;\
s|pay/manage/frontend|dashboard|;\
=/-16/…\
:pane_current_path}:#{pane_current_command}\
 '

set -g monitor-activity on

# colors
set -g default-terminal 'tmux-256color'
set -as terminal-features ",alacritty:RGB"
set -g status-style fg=brightwhite,bg=black
set -g window-status-style fg=black,bg=white
set -g window-status-current-style fg=black,bg=green
set -g window-status-activity-style fg=red

set -g set-titles on
set -g set-titles-string "#{session_name}"

# nested session

bind -T root C-b  \
  set prefix None \;\
  set key-table nested \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  set -g status-style fg=white,bg=black \;\
  set -g window-status-style fg=black,bg=brightblack \;\
  set -g window-status-current-style fg=black,bg=blue \;\
  set -g pane-border-style 'fg=brightblack,bg=black' \;\
  set -g pane-active-border-style 'fg=brightblack,bg=black' \;\
  set -g status-right 'nested' \;\
  refresh-client -S \;\

bind -T nested C-a \
  set -u prefix \;\
  set -u key-table \;\
  set -g status-style fg=brightwhite,bg=black \;\
  set -g window-status-style fg=black,bg=white \;\
  set -g window-status-current-style fg=black,bg=blue \;\
  set -g pane-border-style 'fg=white,bg=black' \;\
  set -g pane-active-border-style 'fg=white,bg=black' \;\
  set -g status-right '' \;\
  refresh-client -S \;\

# https://github.com/tmux-plugins/tpm/blob/95f78336c3972f3e6648b7b3db754f2224320a5e/docs/changing_plugins_install_dir.md
# set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.config/tmux/plugins/tpm/'
# List of plugins
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-resurrect'

# https://github.com/tmux-plugins/tpm/issues/67#issuecomment-319560247
# set-environment -g PATH "/usr/local/bin:/bin:/usr/bin"
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run -b '~/.config/tmux/plugins/tpm/tpm'

new-session -A -s "home"
if-shell \
"[ -d "$HOME" ]" \
"new-session -A -s 'stripe' -c '$HOME/stripe/todo.wiki'; \
new-window -a -d -t '{end}' -n 'pay' -c $HOME/stripe/pay-server; \
send-keys -t '$stripe:pay' 'pay up' Enter; \
new-window -a -d -t '{end}' -c $HOME/stripe/pay-server; \
new-window -a -d -t '{end}' -c $HOME/stripe/pay-server/manage; \
new-window -a -d -t '{end}' -c $HOME/stripe/pay-server/manage/frontend"
